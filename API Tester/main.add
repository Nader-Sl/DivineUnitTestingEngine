--[[
    API Tester for BoL 2.0
    v1.0.2

    by Weee

    ## What is it?
    This contains a special **API Tester** class and multiple **API tests** which help to find what is bugged out after new L patches.
    Among present tests there are also few test-demos which demonstrate some bugs I've found.

    ## How to use:
    The **main point** of this tester is to fill it with **fully _automated_ tests** as much as possible, so they will start on their own as soon as script is loaded and game is started.
    Basically you just have to load it and **let it do the job**. Additionally you can switch between tests (go back or forward through tests) with **_hotkeys_**.

    ## Hotkeys:
    - **L** - runs **next** test
    - **J** - runs **previous** test

    Some tests may be performed automatically, in this case it will automatically start next test. Read console/chat during testing for more information.

    ## Important:
    During automatic testing please don't use any spells and don't move your hero.
]]




--[[
    Bugs and notes:

        UNFIXED:
            1) If there is Graphics.DrawLine() and Render.Line with same width - it bugs out and draws only one of them.
            2) myHero.animation is still buggy.
            3) Callback.Unbind() is often causing bugsplats.
            5) "GameStart" callback gets triggered before actual game start if you reload the script during loading screen.

        FIXED:
            1) [done] Calling myHero.level is causing bugsplats.
            2) [done] Graphics.DrawText completely ignores size parameter.
            3) [done] Didn't find WINDOW_W, WINDOW_H alternatives.
            4) [not really needed] We need separate BoL 1.0 like GetTextArea function. Right now it's inside Render.Text class, but it won't hurt to have it as standalone additionally.
]]




-- Utility:

table.pack = table.pack or function(...)
    local args = {}
    local i = 1
    while select(i, ...) do
        args[i] = select(i, ...)
        i = i+1
    end
    return args
end
local function GetRow(counter, maxRows) return counter%(maxRows or 10) end
local function GetCol(counter, maxRows) local col = math.modf(counter/(maxRows or 10)) return col end
--[[
    Stolen from AllClass 1.0
    Returns a number that is needed for Animation Drawing Functions.
    @param number A time in seconds in which the output goes from 0 to 1
    @param number An offset in seconds which will be added to the time to calculate the output
    @returns number A number that goes from 0 to 1 in a time interval you've set (0 .. 0,1 ... 0,9 .. 1,0 .. 0 .. 0,1 ...)
]]
local function GetDrawClock(time, offset)   -- credits to Grey
    time, offset = time or 1, offset or 0
    return (os.clock() + offset) % time / time
end




-- Main:

function OnLoad()
    local T = Tester()

    -- Adding Tests:
    --[[
        Test #1     [Mandatory]
        Description:
            Standard initial tests which are required for this testing script to work.
        Subjects to test:
    ]]
    local subjectsToTest = {
        "print()",
        "Game.Chat.Print()",
        "Utility.DelayAction()",
    }
    T:Add(
        "Init",                     -- Test name
        "Standard initial tests",   -- Test description
        "Once",                     -- Callback name or "Once" if it should be executed once
        function()                  -- Function to run
            T:EmptyPrint()
            print("This is print()")
            Game.Chat.Print("This is Game.Chat.Print()")

            -- Testing Utility.DelayAction()
            T.bufferTick = os.clock() + 1
            Utility.DelayAction(function()
                T:CheckTest(T.bufferTick and os.clock() >= T.bufferTick)
            end, 1100)
        end,
        function() T.bufferTick = nil end,  -- Finalization function
        true,                               -- If this test is mandatory or not. If test is mandatory and it fails - it will not automatically execute next test.
        subjectsToTest                      -- A table with subjects (strings) to test. Just for more information.
    )

    --[[
        Preparing some stuff for future tests:
    ]]
    local methodColors = {
        ["NO TEST"]        = Graphics.ARGB(255,255,100,100),
        ["FAILED"]         = Graphics.ARGB(255,255,0,0),                -- Status 3
        ["TESTED FINE"]    = Graphics.ARGB(255,100,255,100),            -- Status 2
        ["NOT TESTED YET"] = Graphics.ARGB(255,255,255,100),            -- Status 0
    }
    --[[
        myHeroMethods[methodName]:
            false    = "NOT TESTED YET"
            true     = "TESTED FINE"
            "FAILED" = "FAILED"
            nil      = "NO TEST"
    ]]
    local myHeroMethods = {}
    local function DrawMyHeroMethods(x, y)
        local textSize  = 12
        local maxRows   = 30
        local rowMargin = 15
        local colMargin = 400
        local x         = x or 50
        local y         = y or 170

        local stuff = class_info(myHero)
        local counter = 0

        -- Going through all methods of myHero class:
        for k, v in pairs(stuff.methods) do
            local status = myHeroMethods[k] == nil and "NO TEST" or myHeroMethods[k] == "FAILED" and "FAILED" or myHeroMethods[k] and "TESTED FINE" or "NOT TESTED YET"
            Graphics.DrawText("myHero:" .. k .. "() - " .. status, textSize, x + GetCol(counter, maxRows)*colMargin, y + GetRow(counter, maxRows)*rowMargin, methodColors[status])
            counter = counter + 1
        end
    end
    local myHeroMembers = {}


    --[[
        Test #2     [Mandatory]
        Description:
            Testing myHero:Move(x, y) method together with used members.
        TODO:
            We can also test myHero.ms (movement speed)
            We can also test SendPacket and RecvPacket callbacks
            We can also test path related members and methods
    ]]
    local subjectsToTest = {
        "myHero:Move()",
        "myHero.pos",
        "myHero.visionPos",
        "myHero.drawPos",
        "myHero.x",
        "myHero.y",
        "myHero.z",
        "myHero.isMoving",
    }
    local methodName = "Move"
    myHeroMethods[methodName] = false
    -- Temporary draw callback:
    T.draw = true
    local drawFn = function() if T.draw then DrawMyHeroMethods(500) end end
    T:Add(methodName, "myHero:Move() test which also tests some other stuff", "Once",
        function()
            -- Adding temporary Draw callback:
            Callback.Bind("Draw", drawFn)

            T.xyzSumm = myHero.x + myHero.y + myHero.z
            myHero:Move(myHero.x + math.random(-500, 500), myHero.z + math.random(-500, 500))
            Utility.DelayAction(function()
                local condition = T.xyzSumm ~= myHero.x + myHero.y + myHero.z
                if condition then
                    myHeroMethods[methodName] = true
                    myHeroMembers.x, myHeroMembers.y, myHeroMembers.z = true, true, true
                else
                    myHeroMethods[methodName] = "FAILED"
                end
                T:CheckTest(condition)
            end, 1000)
        end,
        function()
            -- Unbinding draw stuff:
            T.draw = nil
            -- BUGSPLAT BUGSPLAT BUGSPLAT: Uncommenting this is causing bugsplat as soon as drawFn() gets unbinded from "Draw" callback
            --Utility.DelayAction(function() Callback.Unbind("Draw", drawFn) end, 1000)
        end, true, subjectsToTest
    )


    --[[
        This is just a dummy useless test:
    ]]
    T:Add("Dummy", "dummy", "SendPacket", function(packet) print(packet.header) end)










    --[[
        RUN
          THEM
             TESTS
    ]]
    T:Run()











    if true then return end -- we don't want to execute what's below this line
    --====================== EVERYTHING BELOW THIS IN THIS SCOPE IS OLD CRAP ======================--
    --====================== EVERYTHING BELOW THIS IN THIS SCOPE IS OLD CRAP ======================--
    --====================== EVERYTHING BELOW THIS IN THIS SCOPE IS OLD CRAP ======================--
    --====================== EVERYTHING BELOW THIS IN THIS SCOPE IS OLD CRAP ======================--
    --[[ TODO: Delete this crap later, when it will be replaced with better tests ]]

    --[[
        Test #2
        Draw myHero members
    ]]
    T:AddTest("Draw myHero members", "Draw", function()
        local textSize = 12
        local maxRows = 30
        local rowMargin, colMargin = 15, 400
        local x, y = 50, 170

        local stuff = class_info(myHero)
        local counter = 0
        -- Going through all members of myHero class:
        for k, v in pairs(stuff.attributes) do
            if v and v ~= "level" then
                if type(myHero[v]) == "string" or type(myHero[v]) == "number" or type(myHero[v]) == "Vector3" or type(myHero[v]) == "Vector2" or type(myHero[v]) == "boolean" then
                    Graphics.DrawText(v .. ": " .. tostring(myHero[v]), textSize, x + GetCol(counter, maxRows)*colMargin, y + GetRow(counter, maxRows)*rowMargin, Graphics.ARGB(255,255,255,255))
                else
                    Graphics.DrawText(v .. ": " .. type(myHero[v]), textSize, x + GetCol(counter, maxRows)*colMargin, y + GetRow(counter, maxRows)*rowMargin, Graphics.ARGB(255,255,100,100))
                end
                counter = counter + 1
            end
        end
    end)


    --[[
        Test #4
        Testing myHero methods
    ]]
    local methodName = "Move"
    myHeroMethods[methodName] = false
    T:AddTest("Testing myHero:" .. methodName .. "()", "Draw", function()
        local status = myHeroMethods[methodName] == nil and "NO TEST" or myHeroMethods[methodName] == "FAILED" and "FAILED" or myHeroMethods[methodName] and "TESTED FINE" or "NOT TESTED YET"
        Graphics.DrawText("Testing myHero:" .. methodName .. "() - " .. status, 12, 50, 170, methodColors[status])
        DrawMyHeroMethods(500)
        if T.auto then
            if not T.buffer then
                T.buffer = myHero.x + myHero.z
                myHero:Move(myHero.x + math.random(-300, 300), myHero.z + math.random(-300, 300))
                Utility.DelayAction(function()
                    if T.buffer ~= myHero.x + myHero.z then
                        myHeroMethods[methodName] = true T:CompletedTest()
                    else
                        myHeroMethods[methodName] = "FAILED" T:FailedTest()
                    end
                end, 1000)
            end
        else
            myHero[methodName](myHero, myHero.x + math.random(-300, 300), myHero.z + math.random(-300, 300))
            if Keyboard.IsKeyPressed(Keyboard.GetKey("k")) then myHeroMethods[methodName] = true end
            Graphics.DrawText("Press \"K\" on your keyboard to confirm successful test", 12, 50, 185, Graphics.ARGB(255,255,255,255))
        end
    end)

    --[[
        Test #5
        Testing myHero methods
    ]]
    local methodName = "Hold"
    myHeroMethods[methodName] = false
    T:AddTest("Testing myHero:" .. methodName .. "()", "Draw", function()
        local status = myHeroMethods[methodName] == nil and "NO TEST" or myHeroMethods[methodName] == "FAILED" and "FAILED" or myHeroMethods[methodName] and "TESTED FINE" or "NOT TESTED YET"
        Graphics.DrawText("Testing myHero:" .. methodName .. "() - " .. status, 12, 50, 170, methodColors[status])
        DrawMyHeroMethods(500)
        if T.auto then
            if not T.buffer2 and myHeroMethods["Move"] then
                myHero:Move(myHero.x + 5000, myHero.z + 5000)
                T.buffer2 = true
                Utility.DelayAction(function()
                    myHero:Hold()
                    Utility.DelayAction(function()
                        T.buffer = myHero.x + myHero.z
                        Utility.DelayAction(function()
                            if T.buffer and T.buffer == myHero.x + myHero.z then
                                myHeroMethods[methodName] = true T:CompletedTest()
                            else
                                myHeroMethods[methodName] = "FAILED" T:FailedTest()
                            end
                        end, 500)
                    end, 500)
                end, 500)
            end
        else
            myHero[methodName](myHero)
            if Keyboard.IsKeyPressed(Keyboard.GetKey("k")) then myHeroMethods[methodName] = true end
            Graphics.DrawText("Press \"K\" on your keyboard to confirm successful test", 12, 50, 185, Graphics.ARGB(255,255,255,255))
        end
    end)

    --[[
        Test #6
        Testing myHero methods
    ]]
    local methodName = "DistanceTo"
    myHeroMethods[methodName] = false
    T:AddTest("Testing myHero:" .. methodName .. "()", "Draw", function()
        local status = myHeroMethods[methodName] == nil and "NO TEST" or myHeroMethods[methodName] == "FAILED" and "FAILED" or myHeroMethods[methodName] and "TESTED FINE" or "NOT TESTED YET"
        Graphics.DrawText("Testing myHero:" .. methodName .. "(mousePos) - " .. status, 12, 50, 170, methodColors[status])
        Graphics.DrawText("Result: " .. tostring(myHero[methodName](myHero, mousePos)), 12, 50, 200, methodColors[status])
        DrawMyHeroMethods(500)
        if T.auto then
            if not T.buffer then
                T.buffer = myHero:DistanceTo(mousePos)
                myHero:Move(myHero.x + math.random(-300, 300), myHero.z + math.random(-300, 300))
                Utility.DelayAction(function()
                    if T.buffer ~= myHero:DistanceTo(mousePos) then
                        myHeroMethods[methodName] = true T:CompletedTest()
                    else
                        myHeroMethods[methodName] = "FAILED" T:FailedTest()
                    end
                end, 500)
            end
        else
            myHero[methodName](myHero, myHero.x + math.random(-300, 300), myHero.z + math.random(-300, 300))
            if Keyboard.IsKeyPressed(Keyboard.GetKey("k")) then myHeroMethods[methodName] = true end
            Graphics.DrawText("Press \"K\" on your keyboard to confirm successful test", 12, 50, 185, Graphics.ARGB(255,255,255,255))
        end
    end)

    --[[
        Test #..
        Summary of all myHero methods tests
    ]]
    T:AddTest("Draw myHero methods", "Draw", function() DrawMyHeroMethods(500) end)

    --[[
        Test #20
        DrawText Test
    ]]
    T:AddTest("DrawText Test", "Draw", function()
        local drawClock = GetDrawClock(1.5,0)
        Graphics.DrawText("Alpha!", 12, 200, 200, Graphics.ARGB(drawClock*255, 255, 255, 255))
        Graphics.DrawText("Size!", drawClock*30, 200, 220, Graphics.ARGB(255, 255, 255, 255))
        Graphics.DrawText("X!", 12, drawClock*200, 240, Graphics.ARGB(255, 255, 255, 255))
        Graphics.DrawText("Y!", 12, 200, drawClock*260, Graphics.ARGB(255, 255, 255, 255))
        Graphics.DrawText("R!", 12, 200, 280, Graphics.ARGB(255, drawClock*255, 0, 0))
        Graphics.DrawText("G!", 12, 200, 300, Graphics.ARGB(255, 0, drawClock*255, 0))
        Graphics.DrawText("B!", 12, 200, 320, Graphics.ARGB(255, 0, 0, drawClock*255))
        Graphics.DrawText("Randomized!", math.random(1,30), math.random(300, 400), math.random(200,300), Graphics.ARGB(math.random(0, 255), math.random(0, 255), math.random(0, 255), math.random(0, 255)))
    end)

    --[[
        Test #21
        DrawLine Test
    ]]
    T:AddTest("DrawLine Test", "Draw", function()
        Graphics.DrawLine(Geometry.Vector2(200 - 100*GetDrawClock(1.5,0), 200 + 100*GetDrawClock(3,0)), Geometry.Vector2(200 + 100*GetDrawClock(1), 300 - 100*GetDrawClock(2,0)), 5*GetDrawClock(1.5,0), Graphics.ARGB(255*GetDrawClock(1.5,0), 255*GetDrawClock(5,0), 255*GetDrawClock(10,0), 255*GetDrawClock(1,0)))

        -- Line blinking bug test:
        Graphics.DrawText(" - Graphics.DrawLine with random 1-2px random width", 12, 400, 290, Graphics.ARGB(255,255,255,255))
        Graphics.DrawText(" - Render.Line with static 1px width (This line shouldn't blink at all)", 12, 400, 340, Graphics.ARGB(255,255,255,255))
        Graphics.DrawLine(Geometry.Vector2(300, 300), Geometry.Vector2(400, 300), math.random(1,2), Graphics.ARGB(255, 255, 255, 255))
        if not T.line then
            T.line = Render.Line(Geometry.Vector2(300, 350), Geometry.Vector2(400, 350), 1, Graphics.ARGB(255, 255, 255, 255):ToNumber())
            T.line:Add()
        end
    end, function() if T.line then T.line:Remove() T.line = nil end end)

    --[[
        Test #
        Template
    ]]
    T:AddTest("", nil, function()
    end)

end
Callback.Bind("GameStart", OnLoad)








--[[
    Tester Class
        local T = Tester()
        local Test = Test(T, "My Test 1", "My first test is awesome", "Draw", function() Graphics.DrawText("Test", 12, 100, 100, Graphics.ARGB(255,255,255,255)) end, function() print("We finished this test!") end, false, { "Graphics.DrawText()", "Lulz" } )
        Test:Print("This is special print for Test!")
        T:Add(Test)
        T:Add("My Test 2", "My second test is okay too", "Draw", function() Graphics.DrawText("Test 2", 12, 100, 200, Graphics.ARGB(255,255,0,0)) end, function() print("We second test too!") end, false, { "Graphics.DrawText()", "Lulz 2" } )
        T:Next()
        T:Prev()
        T:EmptyPrint()
        T:Print("This is special print for Tester!")
]]
class("Tester")
function Tester:__init()
    self.auto = true
    self.tests = {}
    self.index = 0
    self.drawX, self.drawY = 50, 50

    Callback.Bind("Draw", function()
        if self.index == 0 or #self.tests == 0 then
            Graphics.DrawText("Add some tests first", 12, self.drawX, self.drawY, Graphics.ARGB(255,255,255,255))
        else
            Graphics.DrawText("Running Test " .. self.index .. "/" .. #self.tests .. " (" .. (self.tests[self.index].desc or "No Description") .. ")", 12, self.drawX, self.drawY, Graphics.ARGB(255,255,200,200))
            Graphics.DrawText("Press J or L to navigate through tests...", 12, self.drawX, self.drawY + 15, Graphics.ARGB(255,255,200,200))
            Graphics.DrawText("Please don't move and don't cast any spells during the tests", 12, self.drawX, self.drawX + 30, Graphics.ARGB(255,255,0,0))
        end
    end)

    Callback.Bind("WndMsg", function(msg, key)
        if msg == 257 then
            if key == Keyboard.GetKey("j") then
                self:Prev()
            elseif key == Keyboard.GetKey("l") then
                self:Next()
            end
        end
    end)

    return self
end

function Tester:Print(str)
    print("[API Tester] " .. str)
    Game.Chat.Print("<font color='#AAAA00'>[API Tester]</font> " .. str)
end

function Tester:EmptyPrint()
    print("")
    Game.Chat.Print("")
end

function Tester:Add(...)
    local args = table.pack(...) or {}
    local Test = #args == 1 and args[1] and type(args[1]) == "table" and self:AddTestObj(args[1]) or self:CreateAndAddTestObj(args[1], args[2], args[3], args[4], args[5], args[6], args[7])
end

function Tester:AddTestObj(Test)
    if Test then table.insert(self.tests, Test) end
    return Test
end

function Tester:CreateAndAddTestObj(name, desc, eCallback, callbackFn, finalizeFn, mandatory, subjectsToTest)
    if eCallback == nil or callbackFn == nil then return nil end
    return self:AddTestObj(Test(self, name, desc, eCallback, callbackFn, finalizeFn, mandatory, subjectsToTest))
end

function Tester:Next()
    if #self.tests > 0 then
        -- Stopping current test:
        self.tests[self.index]:Stop()
        -- Running next test:
        self.index = self.index == #self.tests and 1 or self.index + 1
        self.tests[self.index]:Run()
    end
end

function Tester:Prev()
    if #self.tests > 0 then
        -- Stopping current test:
        self.tests[self.index]:Stop()
        -- Running previous test:
        self.index = self.index == 1 and #self.tests or self.index - 1
        self.tests[self.index]:Run()
    end
end

function Tester:Run()
    if self.index == 0 then
        self.index = 1
        self:EmptyPrint()
        self:Print("Running first test...")
    end
    if #self.tests > 0 and self.tests[self.index] then self.tests[self.index]:Run() end
end

function Tester:CheckTest(condition)
    if condition then self:CompletedTest() else self:FailedTest() end
    return condition
end

function Tester:CompletedTest()
    self.tests[self.index]:Completed()
    self:Print("Switching to next test...")
    if self.index == #self.tests then
        self:EmptyPrint()
        self:Print("No more tests to test ;>")
    else
        self:Next()
    end
end

function Tester:FailedTest()
    self.tests[self.index]:Failed()
    if self.tests[self.index].mandatory then
        self:Print("[ERROR] Mandatory test failed.")
    else
        self:Print("Switching to next test...")
        if self.index == #self.tests then
            self:EmptyPrint()
            self:Print("No more tests to test ;>")
        else
            self:Next()
        end
    end
end





--[[
    Test Class
        local T = Tester()
        local Test = Test(T, "My Test 1", "My first test is awesome", "Draw", function() Graphics.DrawText("Test", 12, 100, 100, Graphics.ARGB(255,255,255,255)) end, function() print("We finished this test!") end, false, { "Graphics.DrawText()", "Lulz" } )
        Test:Print("This is special print for Test!")
]]
class("Test")
function Test:__init(parent, name, desc, eCallback, callbackFn, finalizeFn, mandatory, subjectsToTest)
    self.parent = parent

    self.name = name or parent.index + 1
    self.desc = desc or "No description"
    self.eCallback = eCallback
    self.callbackFn = callbackFn
    self.finalizeFn = finalizeFn
    self.mandatory = mandatory
    self.subjectsToTest = subjectsToTest or nil

    --[[
        Test Status:
            0 - Created
            1 - Launched at least once
            2 - Successfully Completed
            3 - Failed
    ]]
    self.status = 0
    self.running = false

    return self
end

function Test:Print(str)
    print("[API Tester] [" .. self.parent.index .. "/" .. #self.parent.tests .. " | " .. self.name .. "] " .. str)
    Game.Chat.Print("<font color='#AAAA00'>[API Tester] [" .. self.parent.index .. "/" .. #self.parent.tests .. " | " .. self.name .. "]</font> " .. str)
end

function Test:Completed()
    self.parent:EmptyPrint()
    self:Print("[OK] Test Completed!")
    self.status = 2 -- Status: Successfully Completed
end

function Test:Failed()
    self.parent:EmptyPrint()
    self:Print("[FAIL] Test Failed!")
    self.status = 3 -- Status: Failed
end

function Test:Run()
    if not self.running then
        self.parent:EmptyPrint()
        self:Print("Executing!")
        self:Print("Info: " .. self.desc)
        self.running = true
        if self.eCallback == "Once" then
            self.callbackFn()
        else
            Callback.Bind(self.eCallback, function(...) if self.running then self.callbackFn(...) end end)
        end 
    end
end

function Test:Stop()
    self.running = false
    if self.eCallback ~= "Once" then Callback.Unbind(self.eCallback, self.callbackFn) end   -- Unbind it
    if self.finalizeFn then self.finalizeFn() end
end